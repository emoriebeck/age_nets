gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(temp_plots) <- d$age
saveGIF(loop.animate()
, interval = 2
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
setwd("~/Box/networks/SAPA/02-results/01-plots/01-gifs")
library(animation)
draw.a.plot <-  function(x){
plot(net_plots[[x]])
title(x)
}
# Pure Top Down - Highest in OutStrength, Lowest in InStrength
loop.animate <- function() {
lapply(names(net_plots), function(i) {draw.a.plot(i)})
}
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate()
, interval = 2
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
debug(gif_fun)
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
loop.animate()
setwd("~/Box/networks/SAPA/02-results/01-plots/01-gifs")
library(animation)
draw.a.plot <-  function(x){
plot(p[[x]])
title(x)
}
# Pure Top Down - Highest in OutStrength, Lowest in InStrength
loop.animate <- function(p) {
lapply(names(p), function(i) {draw.a.plot(i)})
}
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate()
, interval = 2
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
setwd("~/Box/networks/SAPA/02-results/01-plots/01-gifs")
library(animation)
draw.a.plot <-  function(x){
plot(p[[x]])
title(x)
}
# Pure Top Down - Highest in OutStrength, Lowest in InStrength
loop.animate <- function(p) {
lapply(names(p), function(i) {draw.a.plot(i)})
}
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate(net_plots)
, interval = 2
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
setwd("~/Box/networks/SAPA/02-results/01-plots/01-gifs")
library(animation)
draw.a.plot <-  function(age, p){
plot(p)
title(age)
}
# Pure Top Down - Highest in OutStrength, Lowest in InStrength
loop.animate <- function(p) {
map2(names(p), p, draw.a.plot)
# lapply(names(p), function(i) {draw.a.plot(i)})
}
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate()
, interval = 2
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
setwd("~/Box/networks/SAPA/02-results/01-plots/01-gifs")
library(animation)
draw.a.plot <-  function(age, p){
plot(p)
title(age)
}
# Pure Top Down - Highest in OutStrength, Lowest in InStrength
loop.animate <- function(p) {
map2(names(p), p, draw.a.plot)
# lapply(names(p), function(i) {draw.a.plot(i)})
}
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate(net_plots)
, interval = 2
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
source("~/Box/networks/age_nets/custom_qgraph.R")
communities20s <- MT_net_nested %>% filter(age == 2)#)$communities[[1]]
communities60s <- (MT_net_nested %>% filter(inventory == "IPIP50" & age == 6))$communities[[1]]
b_color_fun <- function(c){
if(!is.na(c) & max(unique(c$louvain$membership)) <= 9){
mapvalues(c$louvain$membership, from = seq(1, max(c$louvain$membership),1),
to = RColorBrewer::brewer.pal(max(c$louvain$membership),"Set3"))
} else{
RColorBrewer::brewer.pal(3,"Set3")[1]
}
}
MT_net_nested <- MT_net_nested %>%
# filter(set == "decades") %>%
mutate(bordercolors = map(communities, possibly(b_color_fun, NA_real_)),
net = map2(net, bordercolors, possibly(EDBqgraph_communities, NA_real_))) %>%
arrange(age)
comm_plot_fun <- function(d, inventory, rule, gamma){
pdf(file = sprintf("~/Box/networks/SAPA/02-results/01-plots/04-communities/%s-%s-%s.pdf", inventory, rule, gamma)
, width = 800, height = 400)
par(mfrow = c(1,2))
plot((d %>% filter(age == 2))$net[[1]])
title("20s")
plot((d %>% filter(age == 6))$net[[1]])
title("60s")
dev.off()
png(file = sprintf("~/Box/networks/SAPA/02-results/01-plots/04-communities/%s-%s-%s.png", inventory, rule, gamma)
, width = 2000, height = 1000)
par(mfrow = c(1,2))
plot((d %>% filter(age == 2))$net[[1]])
title("20s")
plot((d %>% filter(age == 6))$net[[1]])
title("60s")
dev.off()
}
MT_net_nested %>%
select(inventory:set, net) %>%
filter(age %in% c(2, 6)) %>%
group_by(inventory, rule, gamma) %>%
nest() %>%
ungroup() %>%
mutate(p = pmap(list(data, inventory, rule, gamma), comm_plot_fun))
pdf(filename = "~/Box/networks/SAPA/photos/nets_20s_60s.pdf", width = 800, height = 400)
par(mfrow = c(1,2))
plot((MT_net_nested %>% filter(inventory == "IPIP50" & age == 2 & rule == "median" & gamma == ".25"))$net[[1]])
title("20s")
plot((MT_net_nested_gr %>% filter(inventory == "IPIP50" & age == 6 & rule == "median" & gamma == ".25"))$net[[1]])
title("60s")
dev.off()
setwd("~/Box/networks/SAPA/02-results/01-plots/01-gifs")
library(animation)
draw.a.plot <-  function(age, p){
plot(p)
title(age)
}
# Pure Top Down - Highest in OutStrength, Lowest in InStrength
loop.animate <- function(p) {
map2(names(p), p, draw.a.plot)
# lapply(names(p), function(i) {draw.a.plot(i)})
}
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate(net_plots)
, interval = 2
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate(net_plots)
, interval = .5
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
source("~/Box/networks/age_nets/custom_qgraph.R")
MT_net_nested <- tibble(
file = list.files("~/Box/networks/SAPA/02-results/multitrait-age/network")
, set = "age"
) %>% full_join(tibble(
file = list.files("~/Box/networks/SAPA/02-results/multitrait-decades/network")
, set = "decades"
)) %>%
separate(file, c("inventory", "age", "rule", "gamma"), sep = "-", remove = F) %>%
mutate(gamma = str_remove_all(gamma, ".RData")
, gamma = str_remove_all(gamma, "0")
, gamma = paste0(".", gamma)) %>%
mutate(net = pmap(list(file, set, "network", "graph"), possibly(loadRData, NA_real_))
, mat = pmap(list(file, set, "cor", "cor"), possibly(loadRData, NA_real_))
# , centrality = pmap(list(file, set, "centrality", "cent"), possibly(loadRData, NA_real_))
)
communities_fun <-   function(g, cols){
g <- igraph::as.igraph(g)
V(g)$label <- cols
g2 <- g
E(g2)$weight <- abs(E(g2)$weight)
lvc <- igraph::cluster_louvain(g2)
mod <- modularity(lvc, membership(lvc))
subgraphs <- list()
for (i in 1:length(unique(lvc$membership))){
subgraphs[[i]] <- igraph::induced_subgraph(g,
vids = which(lvc$membership == i),
impl = "copy_and_delete")}
results <- list(graph = g,
louvain = lvc,
subgraphs = subgraphs,
mod = mod)
return(results)
}
membership_fun <- function(comm, cols){
if(!is.na(comm)) {
comm <- comm$louvain$membership %>% setNames(cols)
} else{
comm <- rep(1, length(cols)); names(comm) <- cols
}
return(comm)
}
MT_net_nested <- MT_net_nested %>%
mutate(cols = map(mat, colnames),
communities = map2(net, cols, possibly(communities_fun, NA_real_)),
membership = map2(communities, cols, possibly(membership_fun, NA_real_)))
ldply_list <- function(d){
l <- d$membership; names(l) <- d$age
ldply(l) %>% rename(age = .id)
}
communitiesall <- MT_net_nested %>%
select(inventory:set, membership) %>%
filter(!is.na(membership)) %>%
group_by(inventory, rule, gamma, set) %>%
nest() %>%
ungroup() %>%
mutate(data2 = map(data, ldply_list))
communities38below <- MT_net_nested %>%
select(inventory:set, membership) %>%
filter(!is.na(membership) & age <= 38) %>%
group_by(inventory, rule, gamma, set) %>%
nest() %>%
ungroup() %>%
mutate(data = map(data, ldply_list))
communities39above <- MT_net_nested %>%
select(inventory:set, membership) %>%
filter(!is.na(membership) & age >= 39) %>%
group_by(inventory, rule, gamma, set) %>%
nest() %>%
ungroup() %>%
mutate(data = map(data, ldply_list))
ncom_fun <- function(x){
if(is.na(x)) return(1) else return(max(unique(x$louvain$membership)))
}
MT_net_nested <- MT_net_nested %>%
mutate(n_comm = map_dbl(communities, ncom_fun))
b_color_fun <- function(c){
if(!is.na(c) & max(unique(c$louvain$membership)) <= 9){
mapvalues(c$louvain$membership, from = seq(1, max(c$louvain$membership),1),
to = RColorBrewer::brewer.pal(max(c$louvain$membership),"Set3"))
} else{
RColorBrewer::brewer.pal(3,"Set3")[1]
}
}
MT_net_nested <- MT_net_nested %>%
# filter(set == "decades") %>%
mutate(bordercolors = map(communities, possibly(b_color_fun, NA_real_)),
net = map2(net, bordercolors, possibly(EDBqgraph_communities, NA_real_))) %>%
arrange(age)
comm_plot_fun <- function(d, inventory, rule, gamma){
pdf(file = sprintf("~/Box/networks/SAPA/02-results/01-plots/04-communities/%s-%s-%s.pdf", inventory, rule, gamma)
, width = 800, height = 400)
par(mfrow = c(1,2))
plot((d %>% filter(age == 2))$net[[1]])
title("20s")
plot((d %>% filter(age == 6))$net[[1]])
title("60s")
dev.off()
png(file = sprintf("~/Box/networks/SAPA/02-results/01-plots/04-communities/%s-%s-%s.png", inventory, rule, gamma)
, width = 2000, height = 1000)
par(mfrow = c(1,2))
plot((d %>% filter(age == 2))$net[[1]])
title("20s")
plot((d %>% filter(age == 6))$net[[1]])
title("60s")
dev.off()
}
MT_net_nested %>%
select(inventory:set, net) %>%
filter(age %in% c(2, 6)) %>%
group_by(inventory, rule, gamma) %>%
nest() %>%
ungroup() %>%
mutate(p = pmap(list(data, inventory, rule, gamma), comm_plot_fun))
setwd("~/Box/networks/SAPA/02-results/01-plots/01-gifs")
library(animation)
draw.a.plot <-  function(age, p){
plot(p)
title(age)
}
# Pure Top Down - Highest in OutStrength, Lowest in InStrength
loop.animate <- function(p) {
map2(names(p), p, draw.a.plot)
# lapply(names(p), function(i) {draw.a.plot(i)})
}
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate(net_plots)
, interval = .5
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
# original functions no longer used because these were compiled into
# more flexible code in EDBqgraph_orig
EDBqgraph_communities <- function(x, bordercolors){
edgecolors <- c("orchid1", "lightblue")
graph <- qgraph(x
, border.color = bordercolors
, legend = F
, border.width = 4
, DoNotPlot = TRUE
, minimum = .05
)
graph$graphAttributes$Edges$lty[graph$Edgelist$weight < 0] <- 2
graph$graphAttributes$Edges$color <-  ifelse(graph$Edgelist$weight < 0,
"gray", "gray")
dark_colors <- c("#9E9AC8", "#6A51A3", "#3F007D")
graph$graphAttributes$Nodes$label.color[graph$graphAttributes$Nodes$color
%in% dark_colors] <- "white"
return(graph)
}
MT_net_nested <- MT_net_nested %>%
# filter(set == "decades") %>%
mutate(bordercolors = map(communities, possibly(b_color_fun, NA_real_)),
net = map2(net, bordercolors, possibly(EDBqgraph_communities, NA_real_))) %>%
arrange(age)
setwd("~/Box/networks/SAPA/02-results/01-plots/01-gifs")
library(animation)
draw.a.plot <-  function(age, p){
plot(p)
title(age)
}
# Pure Top Down - Highest in OutStrength, Lowest in InStrength
loop.animate <- function(p) {
map2(names(p), p, draw.a.plot)
# lapply(names(p), function(i) {draw.a.plot(i)})
}
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate(net_plots)
, interval = .5
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
MT_net_nested
MT_net_nested$communities[[1]]
MT_net_nested$communities[[1]]$louvain$memberships
MT_net_nested$communities[[1]]$louvain$membership
MT_net_nested
MT_net_nested %>% filter(age == 23)
MT_net_nested %>% filter(age == 23 & inventory == "IPIP50")
(MT_net_nested %>% filter(age == 23 & inventory == "IPIP50"))$communities$louvain$membership[[3]]
(MT_net_nested %>% filter(age == 23 & inventory == "IPIP50"))$communities
(MT_net_nested %>% filter(age == 23 & inventory == "IPIP50"))$communities[[3]]$louvain
(MT_net_nested %>% filter(age == 23 & inventory == "IPIP50"))$communities[[3]]$louvain$membership
bordercolors
seq(1, max(c$louvain$membership),1)
(MT_net_nested %>% filter(age == 23 & inventory == "IPIP50"))$membership[[3]]
source("~/Box/networks/age_nets/custom_qgraph.R")
?qgraph
source("~/Box/networks/age_nets/custom_qgraph.R")
MT_net_nested <- MT_net_nested %>%
# filter(set == "decades") %>%
mutate(bordercolors = map(communities, possibly(b_color_fun, NA_real_)),
net = map2(net, bordercolors, possibly(EDBqgraph_communities, NA_real_))) %>%
arrange(age)
setwd("~/Box/networks/SAPA/02-results/01-plots/01-gifs")
library(animation)
draw.a.plot <-  function(age, p){
plot(p)
title(age)
}
# Pure Top Down - Highest in OutStrength, Lowest in InStrength
loop.animate <- function(p) {
map2(names(p), p, draw.a.plot)
# lapply(names(p), function(i) {draw.a.plot(i)})
}
gif_fun <- function(d, invn, rule, gamma){
net_plots <- d$net
names(net_plots) <- d$age
saveGIF(loop.animate(net_plots)
, interval = .5
, movie.name = sprintf("~/Box/networks/SAPA/02-results/01-plots/01-gifs/%s_%s_%s.gif", invn, rule, gamma)
, ani.width = 500
, ani.height = 500
)
}
mt_gifs <- MT_net_nested %>%
filter(set == "age") %>%
select(inventory, age, rule, gamma, net) %>%
group_by(inventory, rule, gamma) %>%
arrange(age) %>%
nest() %>%
ungroup() %>%
mutate(gif = pmap(list(data, inventory, rule, gamma), gif_fun))
